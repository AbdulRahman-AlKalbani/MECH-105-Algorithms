This MATLAB Algorithm estimates the root of a given function. The user must choose two initial gusses to use this algorithm.

function [root, fx, ea, iter] = falsePosition(func, xl, xu, es, maxit, varargin)
%falsePosition finds the root of a function using false position method.

% varargin is used to allow for any additional inputs that may be passed to func

if nargin<3
    % If the user provides fewer than 3 input arguments, an error message is displayed and the function stops
    error('The function needs at least three input arguments to work')
end

% Test if there is a sign change between the two initial guesses
% If the product of the function evaluated at the lower bound and the upper bound is not negative, an error message is displayed and the function stops
test = func(xl,varargin{:})*func(xu,varargin{:});
if test>0
    error('Between the two initial predictions, there was no sign change')
end

% Set default values for the optional input arguments
if nargin<4||isempty(es)
    % If the user provides fewer than 4 input arguments or if the input for es is empty, the default value of 0.0001 is used
    es=0.0001;
end
if nargin<5||isempty(maxit)
    % If the user provides fewer than 5 input arguments or if the input for maxit is empty, the default value of 200 is used
    maxit=200;
end

% Initialize iteration count, xr (the root estimate), and ea (the approximate error).
iter = 0; xr = xl; ea = 100;

% Begin the iterative process to find the root
while (1)
    % Save the previous value of xr
    xrold = xr;
    % Use the false position method to find the new value of xr
    xr = xu - (func(xu,varargin{:})*(xl-xu))/(func(xl,varargin{:})-func(xu,varargin{:}));
    % Increment the iteration count
    iter = iter + 1;
    % Calculate the approximate error if xr is not equal to 0
    if xr ~= 0
        ea = abs((xr - xrold)/xr) * 100;
    end
    % Evaluate the function at xr
    fx = func(xr, varargin{:});
    % Determine if the sign of the function changes between xl and xr, or between xr and xu
    test = func(xl,varargin{:})*func(xr,varargin{:});
    % Update the bounds of the bracket based on the sign of the function evaluated at xr
    if test < 0
        xu = xr;
    elseif test > 0
        xl = xr;
    else
        ea = 0;
    end
    % Break out of the while loop if the approximate error is less than or equal to the stopping criterion (es) or if the iteration count exceeds the maximum number of iterations (maxit)
    if ea <= es || iter >= maxit, break, end
end

% Save the final estimate of the root
root = xr;
end
